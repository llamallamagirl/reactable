{"version":3,"sources":["../../src/reactable/sort.jsx"],"names":["Sort","Numeric","a","b","valA","parseFloat","toString","replace","valB","isNaN","NumericInteger","Currency","exports","Date","parse","CaseInsensitive","toLowerCase","localeCompare"],"mappings":";;;;;AAAO,IAAIA,sBAAO;AACdC,WADc,mBACNC,CADM,EACHC,CADG,EACA;AACV,YAAIC,OAAOC,WAAWH,EAAEI,QAAF,GAAaC,OAAb,CAAqB,IAArB,EAA0B,EAA1B,CAAX,CAAX;AACA,YAAIC,OAAOH,WAAWF,EAAEG,QAAF,GAAaC,OAAb,CAAqB,IAArB,EAA0B,EAA1B,CAAX,CAAX;;AAEA;AACA,YAAIE,MAAML,IAAN,KAAeK,MAAMD,IAAN,CAAnB,EAAgC;AAC5BJ,mBAAOF,CAAP;AACAM,mBAAOL,CAAP;AACH,SAHD,MAGO;AACH,gBAAIM,MAAML,IAAN,CAAJ,EAAiB;AACb,uBAAO,CAAP;AACH;AACD,gBAAIK,MAAMD,IAAN,CAAJ,EAAiB;AACb,uBAAO,CAAC,CAAR;AACH;AACJ;;AAED,YAAIJ,OAAOI,IAAX,EAAiB;AACb,mBAAO,CAAC,CAAR;AACH;AACD,YAAIJ,OAAOI,IAAX,EAAiB;AACb,mBAAO,CAAP;AACH;;AAED,eAAO,CAAP;AACH,KA1Ba;AA4BdE,kBA5Bc,0BA4BCR,CA5BD,EA4BIC,CA5BJ,EA4BO;AACnB,YAAIM,MAAMP,CAAN,KAAYO,MAAMN,CAAN,CAAhB,EAA0B;AACxB,mBAAOD,IAAIC,CAAJ,GAAQ,CAAR,GAAY,CAAC,CAApB;AACD;;AAED,eAAOD,IAAIC,CAAX;AACD,KAlCa;AAoCdQ,YApCc,oBAoCLT,CApCK,EAoCFC,CApCE,EAoCC;AACX;AACAD,YAAIA,EAAEK,OAAF,CAAU,gBAAV,EAA4B,EAA5B,CAAJ;AACAJ,YAAIA,EAAEI,OAAF,CAAU,gBAAV,EAA4B,EAA5B,CAAJ;;AAEA,eAAOK,QAAQZ,IAAR,CAAaC,OAAb,CAAqBC,CAArB,EAAwBC,CAAxB,CAAP;AACH,KA1Ca;AA4CdU,QA5Cc;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,gBA4CTX,CA5CS,EA4CNC,CA5CM,EA4CH;AACP;AACA;AACA;AACA,YAAIC,OAAOS,KAAKC,KAAL,CAAWZ,CAAX,CAAX;AACA,YAAIM,OAAOK,KAAKC,KAAL,CAAWX,CAAX,CAAX;;AAEA;AACA;AACA,YAAIM,MAAML,IAAN,KAAeK,MAAMD,IAAN,CAAnB,EAAgC;AAC5B,mBAAOI,QAAQZ,IAAR,CAAaC,OAAb,CAAqBC,CAArB,EAAwBC,CAAxB,CAAP;AACH;;AAED,YAAIC,OAAOI,IAAX,EAAiB;AACb,mBAAO,CAAP;AACH;AACD,YAAIA,OAAOJ,IAAX,EAAiB;AACb,mBAAO,CAAC,CAAR;AACH;;AAED,eAAO,CAAP;AACH,KAjEa;AAmEdW,mBAnEc,2BAmEEb,CAnEF,EAmEKC,CAnEL,EAmEQ;AAClB,eAAOD,EAAEc,WAAF,GAAgBC,aAAhB,CAA8Bd,EAAEa,WAAF,EAA9B,CAAP;AACH;AArEa,CAAX","file":"sort.js","sourceRoot":"src","sourcesContent":["export var Sort = {\n    Numeric(a, b) {\n        var valA = parseFloat(a.toString().replace(/,/g,''));\n        var valB = parseFloat(b.toString().replace(/,/g,''));\n\n        // Sort non-numeric values alphabetically at the bottom of the list\n        if (isNaN(valA) && isNaN(valB)) {\n            valA = a;\n            valB = b;\n        } else {\n            if (isNaN(valA)) {\n                return 1;\n            }\n            if (isNaN(valB)) {\n                return -1;\n            }\n        }\n\n        if (valA < valB) {\n            return -1;\n        }\n        if (valA > valB) {\n            return 1;\n        }\n\n        return 0;\n    },\n\n    NumericInteger(a, b) {\n      if (isNaN(a) || isNaN(b)) {\n        return a > b ? 1 : -1;\n      }\n\n      return a - b;\n    },\n\n    Currency(a, b) {\n        // Parse out dollar signs, then do a regular numeric sort\n        a = a.replace(/[^0-9\\.\\-\\,]+/g, '');\n        b = b.replace(/[^0-9\\.\\-\\,]+/g, '');\n\n        return exports.Sort.Numeric(a, b);\n    },\n\n    Date(a, b) {\n        // Note: this function tries to do a standard javascript string -> date conversion\n        // If you need more control over the date string format, consider using a different\n        // date library and writing your own function\n        var valA = Date.parse(a);\n        var valB = Date.parse(b);\n\n        // Handle non-date values with numeric sort\n        // Sort non-numeric values alphabetically at the bottom of the list\n        if (isNaN(valA) || isNaN(valB)) {\n            return exports.Sort.Numeric(a, b);\n        }\n\n        if (valA > valB) {\n            return 1;\n        }\n        if (valB > valA) {\n            return -1;\n        }\n\n        return 0;\n    },\n\n    CaseInsensitive(a, b) {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n    }\n};\n\n"]}